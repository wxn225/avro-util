package com.linkedin.avro.fastserde;

import com.linkedin.avro.fastserde.generated.avro.TestEnum;
import com.linkedin.avro.fastserde.generated.avro.TestRecord;
import com.linkedin.avro.fastserde.generator.AvroRandomDataGenerator;
import com.linkedin.avro.fastserde.micro.benchmark.AvroGenericSerializer;
import com.linkedin.avroutil1.compatibility.AvroCompatibilityHelper;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import org.apache.avro.Schema;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.GenericRecord;
import org.testng.Assert;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import static com.linkedin.avro.fastserde.FastSerdeTestsSupport.*;


public class FastDatumWriterTest {

  private FastSerdeCache cache;

  @BeforeTest(groups = {"serializationTest"})
  public void before() {
    cache = new FastSerdeCache(Runnable::run);
  }

  @Test(groups = {"serializationTest"})
  @SuppressWarnings("unchecked")
  public void shouldCreateSpecificDatumWriter() throws IOException, InterruptedException {
    // given
    FastSpecificDatumWriter<TestRecord> fastSpecificDatumWriter =
        new FastSpecificDatumWriter<>(TestRecord.SCHEMA$, cache);

    TestRecord testRecord = FastSpecificDeserializerGeneratorTest.emptyTestRecord();
    testRecord.testEnum = TestEnum.A;

    // when
    fastSpecificDatumWriter.write(testRecord,
        AvroCompatibilityHelper.newBinaryEncoder(new ByteArrayOutputStream(), true, null));

    // then
    FastSerializer<TestRecord> fastSpecificSerializer =
        (FastSerializer<TestRecord>) cache.getFastSpecificSerializer(TestRecord.SCHEMA$);

    fastSpecificSerializer = (FastSerializer<TestRecord>) cache.getFastSpecificSerializer(TestRecord.SCHEMA$);

    Assert.assertNotNull(fastSpecificSerializer);
    Assert.assertNotEquals(2, fastSpecificSerializer.getClass().getDeclaredMethods().length);
  }

  @Test(groups = {"serializationTest"})
  @SuppressWarnings("unchecked")
  public void shouldCreateGenericDatumReader() throws IOException, InterruptedException {
    Schema recordSchema = createRecord("TestSchema", createPrimitiveUnionFieldSchema("test", Schema.Type.STRING));
    FastGenericDatumWriter<GenericRecord> fastGenericDatumReader = new FastGenericDatumWriter<>(recordSchema, cache);

    GenericRecord record = new GenericData.Record(recordSchema);
    record.put("test", "test");

    // when
    fastGenericDatumReader.write(record, AvroCompatibilityHelper.newBinaryEncoder(new ByteArrayOutputStream(), true, null));

    // then
    FastSerializer<GenericRecord> fastGenericSerializer =
        (FastSerializer<GenericRecord>) cache.getFastGenericSerializer(recordSchema);

    fastGenericSerializer = (FastSerializer<GenericRecord>) cache.getFastGenericSerializer(recordSchema);

    Assert.assertNotNull(fastGenericSerializer);
    Assert.assertNotEquals(2, fastGenericSerializer.getClass().getDeclaredMethods().length);
  }

  @Test(groups = {"serializationTest"})
  public void canLoadPlentySerializer() throws Exception{
//    for(int i=5000; i<10000; i++)
//    {
//      Schema testUserRequestSchema = Schema.parse(new StringBuilder().append("{\"type\":\"record\",\"name\":\"UserRequestEvent").append(i).append("\",\"namespace\":\"com.linkedin.events\",\"fields\":[{\"name\":\"header\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"EventHeader\",\"fields\":[{\"name\":\"memberId\",\"type\":\"int\",\"doc\":\"The LinkedIn member ID of the user initiating the action.  LinkedIn member IDs are integers greater than zero.  Guests are represented either as zero or a negative number.\"},{\"name\":\"viewerUrn\",\"type\":[\"null\",\"string\"],\"doc\":\"The LinkedIn URN of the user initiating the action.  For other applications like Slideshare, this should be filled in when the LinkedIn member URN is actually known.  The LinkedIn member URN would be known, for example, when the user has linked their Slideshare account with their LinkedIn account.\",\"default\":null},{\"name\":\"applicationViewerUrn\",\"type\":[\"null\",\"string\"],\"doc\":\"The Application URN of the user initiating the action.  This URN identifies the member within the particular application that the member is using, which may or may not be LinkedIn.  If the user is interacting with LinkedIn then this should be the LinkedIn URN, the same as viewerUrn.  If the member is interacting with a different site, such as Slideshare, then this should be the URN identifying the member in that site.\",\"default\":null},{\"name\":\"csUserUrn\",\"type\":[\"null\",\"string\"],\"doc\":\"The URN of the CS user initiating the action. A CS user is essentially a LinkedIn member with elevated permissions and can perform Admin actions on a page. A non-null value would indicate CS activity on the website. This field is different from the impersonatorId. ImpersonatorId will be populated when a CS user is logged in as (or impersonating) another member. On the other hand, this field will be populated when a CS user logged in as himself has elevated permissions to perform Admin actions on the website.\",\"default\":null},{\"name\":\"time\",\"type\":\"long\",\"doc\":\"The time of the event\"},{\"name\":\"server\",\"type\":\"string\",\"doc\":\"The name of the server\",\"compliance\":\"NONE\"},{\"name\":\"service\",\"type\":\"string\",\"doc\":\"The name of the service. Synonymous to the com.linkedin.events.monitoring.EventHeader#container field.\",\"compliance\":\"NONE\"},{\"name\":\"environment\",\"type\":[\"string\",\"null\"],\"doc\":\"The environment the service is running in\",\"default\":\"\"},{\"name\":\"guid\",\"type\":{\"type\":\"fixed\",\"name\":\"Guid\",\"size\":16},\"doc\":\"A unique identifier for the message\",\"compliance\":\"NONE\"},{\"name\":\"treeId\",\"type\":[\"null\",{\"type\":\"fixed\",\"name\":\"fixed_16\",\"size\":16}],\"doc\":\"Service call tree uuid. If the traceData field is nonnull, the treeId in traceData should be identical to this.\",\"default\":null},{\"name\":\"requestId\",\"type\":[\"null\",\"int\"],\"doc\":\"Service call request id. If the traceData field is nonnull, the requestId in traceData should be identical to this.\",\"default\":null},{\"name\":\"impersonatorId\",\"type\":[\"null\",\"string\"],\"doc\":\"this is the ID of the CS Agent or Application acting on the users behalf\",\"default\":null},{\"name\":\"version\",\"type\":[\"null\",\"string\"],\"doc\":\"Synonymous to the com.linkedin.events.monitoring.EventHeader#version field. The version that the service which emitted this event was at. For services in multiproducts, this usually comes in the form of {major}.{minor}.{micro} (eg. 0.1.2), however for network services, the version follows a format like so: 0.0.2000-RC8.35047\",\"default\":null},{\"name\":\"instance\",\"type\":[\"null\",\"string\"],\"doc\":\"Synonymous to the com.linkedin.events.monitoring.EventHeader#instance field. The instance ID of the service (eg. i001)\",\"default\":null},{\"name\":\"appName\",\"type\":[\"null\",\"string\"],\"doc\":\"Synonymous to the com.linkedin.events.monitoring.EventHeader#service field. Named 'appName' here since this is what this field actually represents, and 'service' is already used. This is also synonymous to 'appName' in Play and network apps, where on a typical page there would be a <meta name=appName content=biz> tag. For network apps, this would be the container name without the '-tomcat' suffix. So for 'profile-tomcat', it would just be 'profile'. For Play! services, it would just be the container name, such as 'polls-frontend'. For additional information, please see the wiki at go/appname\",\"default\":null},{\"name\":\"testId\",\"type\":[\"null\",\"string\"],\"doc\":\"A client provided ID that uniquely identifies a particular execution of a test case.  This ID is provided by clients through an ENG_TEST_ID cookie.  The Selenium test framework automatically sets this cookie for each request.  This will be null when there is no ENG_TEST_ID provided.  See https://iwww.corp.linkedin.com/wiki/cf/display/ENGS/Selenium+Framework+Architecture+Documentation for more details on the test framework.  See https://iwww.corp.linkedin.com/wiki/cf/display/ENGS/Improving+Automated+Testability+of+Tracking+Events for details on the motiviation behind adding this test ID to the header and how it is used.\",\"default\":null},{\"name\":\"testSegmentId\",\"type\":[\"null\",\"string\"],\"doc\":\"A client provided ID that uniquely identifies a section of the testing code from a  particular execution of a test case.  This ID is provided by clients through an ENG_TEST_SEGMENT_ID cookie. \",\"default\":null},{\"name\":\"auditHeader\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"KafkaAuditHeader\",\"fields\":[{\"name\":\"time\",\"type\":\"long\",\"doc\":\"The time at which the event was emitted into kafka.\"},{\"name\":\"server\",\"type\":\"string\",\"doc\":\"The fully qualified name of the host from which the event is being emitted.\",\"compliance\":\"NONE\"},{\"name\":\"instance\",\"type\":[\"null\",\"string\"],\"doc\":\"The instance on the server from which the event is being emitted. e.g. i001\",\"default\":null},{\"name\":\"appName\",\"type\":\"string\",\"doc\":\"The name of the application from which the event is being emitted. see go/appname\",\"compliance\":\"NONE\"},{\"name\":\"messageId\",\"type\":{\"type\":\"fixed\",\"name\":\"UUID\",\"size\":16},\"doc\":\"A unique identifier for the message\",\"compliance\":\"NONE\"},{\"name\":\"auditVersion\",\"type\":[\"null\",\"int\"],\"doc\":\"The version that is being used for auditing. In version 0, the audit trail buckets events into 10 minute audit windows based on the EventHeader timestamp. In version 1, the audit trail buckets events as follows: if the schema has an outer KafkaAuditHeader, use the outer audit header timestamp for bucketing; else if the EventHeader has an inner KafkaAuditHeader use that inner audit header's timestamp for bucketing\",\"default\":null},{\"name\":\"fabricUrn\",\"type\":[\"null\",\"string\"],\"doc\":\"The fabricUrn of the host from which the event is being emitted. Fabric Urn in the format of urn:li:fabric:{fabric_name}. See go/fabric.\",\"default\":null},{\"name\":\"clusterConnectionString\",\"type\":[\"null\",\"string\"],\"doc\":\"This is a String that the client uses to establish some kind of connection with the Kafka cluster. The exact format of it depends on specific versions of clients and brokers. This information could potentially identify the fabric and cluster with which the client is producing to or consuming from.\",\"default\":null}]}],\"doc\":\"Header used by kafka for auditing the data in the kafka pipeline\",\"default\":null},{\"name\":\"pageInstance\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"PageInstance\",\"namespace\":\"com.linkedin.events.common\",\"fields\":[{\"name\":\"pageUrn\",\"type\":\"string\",\"doc\":\"The page entity. Example: urn:li:page:<pageKey>.\",\"compliance\":\"NONE\"},{\"name\":\"trackingId\",\"type\":{\"type\":\"fixed\",\"name\":\"TrackingId\",\"namespace\":\"com.linkedin.events.common\",\"size\":16},\"doc\":\"Uniquely identifies this rendering of the page.\",\"compliance\":\"NONE\"}]}],\"doc\":\"The instance of a page to which the request that triggered this event is responding.  For more information see go/pageinstance\",\"default\":null},{\"name\":\"clientApplicationInstance\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ApplicationInstance\",\"namespace\":\"com.linkedin.events.common\",\"fields\":[{\"name\":\"applicationUrn\",\"type\":\"string\",\"doc\":\"The application. Example: urn:li:application:<identifier>.\",\"compliance\":\"NONE\"},{\"name\":\"version\",\"type\":\"string\",\"doc\":\"The internal version number of the running application in standardized version format, see go/version.\",\"compliance\":\"NONE\"},{\"name\":\"trackingId\",\"type\":\"com.linkedin.events.common.TrackingId\",\"doc\":\"Uniquely identifies this instantiation of the application.  Created when an application is started from cold.  Preserved through application pause, suspend, loss of focus, background, etc.\",\"compliance\":\"NONE\"}]}],\"doc\":\"The particular instance of a client application which triggered this event.  For more information see go/clientApplicationInstance\",\"default\":null},{\"name\":\"originSource\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"OriginSource\",\"symbols\":[\"QPROD\"]}],\"doc\":\"If present, identifies this request as having an origin in a testing mechanism. If null, indicates a normal request from the external internet. For more information see go/originSource\",\"default\":null},{\"name\":\"sessionUrn\",\"type\":[\"null\",\"string\"],\"doc\":\"If memberId field is non-zero positive number, it indicates that request is member initiated. SessionUrn represents currently logged-in session information. There are two types of URN that represent session: MemberSessionUrn or LoginSessionUrn. MemberSessionUrn is used with MemberToken V3, whereas LoginSessionUrn is used for MemberToken V5 and up. In the long run, all clients will move to LoginSessionUrn. To read more: https://iwww.corp.linkedin.com/wiki/cf/display/ENGS/Session+Tracking\",\"default\":null},{\"name\":\"traceData\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"TraceData\",\"fields\":[{\"name\":\"treeId\",\"type\":\"fixed_16\",\"doc\":\"Service call tree uuid.\",\"compliance\":\"NONE\"},{\"name\":\"requestId\",\"type\":\"int\",\"doc\":\"Service call request id.\",\"compliance\":\"NONE\"},{\"name\":\"taskId\",\"type\":\"int\",\"doc\":\"An identifier for the task during which this trace data was saved.\",\"compliance\":\"NONE\"},{\"name\":\"rpcTrace\",\"type\":\"string\",\"doc\":\"The service call stack leading to this service.\",\"compliance\":\"NONE\"},{\"name\":\"forceTraceEnabled\",\"type\":\"boolean\",\"doc\":\"Flag indicating if the service call trace has been force enabled and ServiceCallEvents were emitted.\",\"default\":false,\"compliance\":\"NONE\"},{\"name\":\"context\",\"type\":{\"type\":\"map\",\"values\":\"string\"},\"doc\":\"A map containing any additional context or tags needed to support the tracing of the service call. For example, certain tags are used to indicate if the trace should be picked up by call-tree-app for visualization.\",\"compliance\":\"NONE\"},{\"name\":\"scaleFactor\",\"type\":[\"null\",\"double\"],\"doc\":\"A ratio that represents the fraction of service calls that should be traced. The value is only referenced when the service call is initiated to determine whether to enable tracing. Defaults to null for backwards compatibility, but this field should always be present.\",\"default\":null,\"compliance\":\"NONE\"}]}],\"doc\":\"Trace data containing information about the service call details of the service that produced this message. Nullable because this is an opt-in feature and is controlled via config. For more information see go/callTreeAndKafka\",\"default\":null}]}],\"doc\":\"Standard event header\"},{\"name\":\"request\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Request\",\"fields\":[{\"name\":\"method\",\"type\":{\"type\":\"enum\",\"name\":\"Method\",\"symbols\":[\"OPTIONS\",\"GET\",\"HEAD\",\"POST\",\"PUT\",\"DELETE\",\"TRACE\",\"CONNECT\",\"EXTENSION\"]},\"doc\":\"HTTP method of the request.\",\"compliance\":\"NONE\"},{\"name\":\"extensionMethod\",\"type\":[\"null\",\"string\"],\"doc\":\"The method string used if type is set to EXTENSION.\"},{\"name\":\"protocol\",\"type\":{\"type\":\"enum\",\"name\":\"Protocol\",\"symbols\":[\"HTTP\",\"HTTPS\"]},\"doc\":\"Protocol of the request.\",\"compliance\":\"NONE\"},{\"name\":\"ipAsBytes\",\"type\":[\"null\",{\"type\":\"fixed\",\"name\":\"IPAddress\",\"size\":16}],\"doc\":\"IPAddress of the request.\"},{\"name\":\"domain\",\"type\":[\"null\",\"string\"],\"doc\":\"The HTTP host+port of the request before traffic layer remap processing. For example, a remap might map http://www.linkedin.com/comm/school/ to http://traffic.fizzy.regular.fizzy-ats.prod-lor1.atd.prod.linkedin.com:12275/voyager/school/. In this case, 'domain' would be 'www.linkedin.com'.\"},{\"name\":\"path\",\"type\":\"string\",\"doc\":\"The HTTP path of the request before traffic layer remap processing. For example, a remap might map http://www.linkedin.com/comm/school/ to http://traffic.fizzy.regular.fizzy-ats.prod-lor1.atd.prod.linkedin.com:12275/voyager/school/. In this case, 'path' would be 'comm/school/'.\",\"compliance\":\"NONE\"},{\"name\":\"query\",\"type\":[\"null\",\"string\"],\"doc\":\"Whitelisted query parameters from the request.\"},{\"name\":\"referer\",\"type\":[\"null\",\"string\"],\"doc\":\"The referer URL in the request.\"},{\"name\":\"userAgent\",\"type\":[\"null\",\"string\"],\"doc\":\"The user agent of the request.\"},{\"name\":\"xForwardedFor\",\"type\":[\"null\",\"string\"],\"doc\":\"X-Forwarded-For header.\"},{\"name\":\"accept\",\"type\":[\"null\",\"string\"],\"doc\":\"User agent's accept content types.\"},{\"name\":\"acceptEncoding\",\"type\":[\"null\",\"string\"],\"doc\":\"User agent's accept encodings.\"},{\"name\":\"acceptLanguage\",\"type\":[\"null\",\"string\"],\"doc\":\"User agent's accept languages.\"},{\"name\":\"contentLength\",\"type\":[\"null\",\"int\"],\"doc\":\"Content length in the request (present in POSTs).\"},{\"name\":\"bcookie\",\"type\":[\"null\",\"string\"],\"doc\":\"Raw bcookie in the request.\"},{\"name\":\"bsCookieInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"BsCookieInfo\",\"fields\":[{\"name\":\"issueTime\",\"type\":\"long\",\"doc\":\"Issue timestamp in the cookie, in seconds\"},{\"name\":\"browserId\",\"type\":\"string\",\"doc\":\"The browser id field of the cookie\"}]}],\"doc\":\"BsCookie in the request.\"},{\"name\":\"xLiTrack\",\"type\":[\"null\",\"string\"],\"doc\":\"Tracking header sent by mobile clients.\"},{\"name\":\"contentType\",\"type\":[\"null\",\"string\"],\"doc\":\"Applicable in case of POST requests.\"},{\"name\":\"cookies\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Names of cookies submitted.\"},{\"name\":\"encryptedFullUrl\",\"type\":[\"null\",\"string\"],\"doc\":\"Encrypted full URL of request.\",\"default\":null},{\"name\":\"encryptedBody\",\"type\":[\"null\",\"string\"],\"doc\":\"Encrypted body of request.\",\"default\":null},{\"name\":\"isXSS\",\"type\":\"boolean\",\"doc\":\"Flag set if request contains potential xss.\",\"default\":false,\"compliance\":\"NONE\"},{\"name\":\"sessionId\",\"type\":[\"null\",\"int\"],\"doc\":\"The session ID of the client request.\",\"default\":null},{\"name\":\"loginSessionUrn\",\"type\":[\"null\",\"string\"],\"doc\":\"The login session urn of enterprise account.\",\"default\":null},{\"name\":\"headers\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"A list of http headers and their values of a request.\",\"default\":null},{\"name\":\"headerNames\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"A list of header names of sensitive or unknown headers.\",\"default\":null},{\"name\":\"mobileHeader\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"MobileHeader\",\"fields\":[{\"name\":\"osName\",\"type\":[\"null\",\"string\"],\"doc\":\"The name of the operating system.\",\"default\":null},{\"name\":\"osVersion\",\"type\":[\"null\",\"string\"],\"doc\":\"The version of the operating system.\",\"default\":null},{\"name\":\"deviceModel\",\"type\":[\"null\",\"string\"],\"doc\":\"The model of the device.\",\"default\":null},{\"name\":\"appVersion\",\"type\":[\"null\",\"string\"],\"doc\":\"Generated as per guidance from Google/Apple and depends on device like its architecture/screen density. Eg: 82301 for Google and 9.5.100 for Apple\",\"default\":null},{\"name\":\"advertiserId\",\"type\":[\"null\",\"string\"],\"doc\":\"This is the unique identifier per device for advertising purposes. More details at: go/mobiletracking.\",\"default\":null},{\"name\":\"vendorId\",\"type\":[\"null\",\"string\"],\"doc\":\"This is the unique identifier per vendor for apps on a device. More details at: go/mobiletracking.\",\"default\":null},{\"name\":\"isAdTrackingLimited\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Tells whether limited ad tracking is enabled by user or not. More details at: go/mobiletracking.\",\"default\":null},{\"name\":\"appMarketingVersion\",\"type\":[\"null\",\"string\"],\"doc\":\"Marketing string which is used to indicate the version of the app we upload to app store. Eg: 4.0.23 for Google and 9.1.2 for Apple\",\"default\":null},{\"name\":\"appVendorVersion\",\"type\":[\"null\",\"string\"],\"doc\":\"For Android, its generated as per guidance from Google and depends on device like its architecture/screen density. Eg: 82301. For Apple, it co-relates to our multi-product version but for apple. Eg: 9.5.100\",\"default\":null},{\"name\":\"appVendorVersionShort\",\"type\":[\"null\",\"string\"],\"doc\":\"For Android, its a subset of appVendorVersion Eg: 823. For Apple, it is a number generated to do patch fixes on appVendorVersion\",\"default\":null},{\"name\":\"appState\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"NativeApplicationState\",\"symbols\":[\"APPLICATION_FOREGROUND_ACTIVE\",\"APPLICATION_FOREGROUND_INACTIVE\",\"APPLICATION_BACKGROUND\"]}],\"doc\":\"State of the app when this event was queued. This should be set by native client. The events containing this header is sent by native clients. More information on states can be found at go/nativeapplicationstate.\",\"default\":null},{\"name\":\"connectionType\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"MobileConnectionType\",\"symbols\":[\"NO_DATA\",\"WIFI\",\"FOUR_G\",\"THREE_G\",\"GPRS\",\"TWO_G\"]}],\"doc\":\"The connection type of the mobile device when event is fired. Null represents that the value is not written by the producer, makes this field backwards compatible. Use UNKNOWN when connection is available but its type is not known. e.g. when iOS client is connected to network but can't determine exact type of network.\",\"default\":null}]}],\"doc\":\"Optional mobile header to track mobile usage.\",\"default\":null},{\"name\":\"remappedDomain\",\"type\":[\"null\",\"string\"],\"doc\":\"The HTTP host+port of the request after traffic layer remap processing. For example, a remap might map http://www.linkedin.com/comm/school/ to http://traffic.fizzy.regular.fizzy-ats.prod-lor1.atd.prod.linkedin.com:12275/voyager/school/. In this case, 'remappedDomain' would be 'traffic.fizzy.regular.fizzy-ats.prod-lor1.atd.prod.linkedin.com:12275'. Null is added for backward compatibility.\",\"default\":null,\"compliance\":\"NONE\"},{\"name\":\"remappedPath\",\"type\":[\"null\",\"string\"],\"doc\":\"The HTTP path of the request after traffic layer remap processing. For example, a remap might map http://www.linkedin.com/comm/school/ to http://traffic.fizzy.regular.fizzy-ats.prod-lor1.atd.prod.linkedin.com:12275/voyager/school/. In this case, 'remappedPath' would be 'voyager/school/'. Null is added for backward compatibility.\",\"default\":null,\"compliance\":\"NONE\"}]}],\"doc\":\"Header and cookie information of the request.\"},{\"name\":\"response\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Response\",\"fields\":[{\"name\":\"statusCode\",\"type\":\"int\",\"doc\":\"Status code.\",\"compliance\":\"NONE\"},{\"name\":\"serverDuration\",\"type\":\"long\",\"doc\":\"Time taken in milliseconds by server to generate the response.\",\"compliance\":\"NONE\"},{\"name\":\"bcookie\",\"type\":[\"null\",\"string\"],\"doc\":\"Bcookie being set.\"},{\"name\":\"bsCookieInfo\",\"type\":[\"null\",\"BsCookieInfo\"],\"doc\":\"Bscookie being set.\"},{\"name\":\"xLiUuid\",\"type\":[\"null\",\"string\"],\"doc\":\"Unique identifier of the request.\"},{\"name\":\"contentType\",\"type\":[\"null\",\"string\"],\"doc\":\"Type of content returned.\"},{\"name\":\"contentLength\",\"type\":[\"null\",\"int\"],\"doc\":\"Size of response body; absent if returning chunked.\"},{\"name\":\"transferEncoding\",\"type\":[\"null\",\"string\"],\"doc\":\"Encoding of the body, if set.\"},{\"name\":\"cookiesSet\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ResponseCookie\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of cookie\"},{\"name\":\"domain\",\"type\":[\"null\",\"string\"],\"doc\":\"Domain on which cookie is set\"},{\"name\":\"maxAge\",\"type\":[\"null\",\"int\"],\"doc\":\"TTL in seconds of cookie\"},{\"name\":\"expires\",\"type\":[\"null\",\"int\"],\"doc\":\"Absolute timestamp in seconds of expiry of cookie\"},{\"name\":\"path\",\"type\":[\"null\",\"string\"],\"doc\":\"Path on which cookie is set\"},{\"name\":\"version\",\"type\":[\"null\",\"string\"],\"doc\":\"Version of cookie\"},{\"name\":\"isSecure\",\"type\":\"boolean\",\"doc\":\"True if secure attribute set\",\"compliance\":\"NONE\"},{\"name\":\"isHttpOnly\",\"type\":\"boolean\",\"doc\":\"True if HTTP only attribute set\",\"compliance\":\"NONE\"},{\"name\":\"sameSite\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"SameSite\",\"symbols\":[\"STRICT\",\"LAX\",\"NONE\"]}],\"doc\":\"SameSite attribute of a cookie determines the context in which cookies will be sent in the request to the server. Default is null, as this field is optional. Browsers such as Chrome 80+ will interpret missing SameSite attribute as LAX. More in RFC: https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#page-27 and https://web.dev/samesite-cookies-explained/\",\"default\":null,\"compliance\":\"NONE\"}]}}],\"doc\":\"Cookies being set.\"},{\"name\":\"cookiesDeleted\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"ResponseCookie\"}],\"doc\":\"Cookies being deleted.\"}]}],\"doc\":\"Response Information.\"}]}").toString());
//
//      cache.getFastGenericSerializer(testUserRequestSchema);
//    }
    for(int i=0; i<4000; i++)
    {
      Schema testUserRequestSchema = Schema.parse(new StringBuilder().append("{\"type\":\"record\",\"name\":\"UserRequestEvent").append(i).append("\",\"namespace\":\"com.linkedin.events\",\"fields\":[{\"name\":\"header\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"EventHeader\",\"fields\":[{\"name\":\"memberId\",\"type\":\"int\",\"doc\":\"The LinkedIn member ID of the user initiating the action.  LinkedIn member IDs are integers greater than zero.  Guests are represented either as zero or a negative number.\"},{\"name\":\"viewerUrn\",\"type\":[\"null\",\"string\"],\"doc\":\"The LinkedIn URN of the user initiating the action.  For other applications like Slideshare, this should be filled in when the LinkedIn member URN is actually known.  The LinkedIn member URN would be known, for example, when the user has linked their Slideshare account with their LinkedIn account.\",\"default\":null},{\"name\":\"applicationViewerUrn\",\"type\":[\"null\",\"string\"],\"doc\":\"The Application URN of the user initiating the action.  This URN identifies the member within the particular application that the member is using, which may or may not be LinkedIn.  If the user is interacting with LinkedIn then this should be the LinkedIn URN, the same as viewerUrn.  If the member is interacting with a different site, such as Slideshare, then this should be the URN identifying the member in that site.\",\"default\":null},{\"name\":\"csUserUrn\",\"type\":[\"null\",\"string\"],\"doc\":\"The URN of the CS user initiating the action. A CS user is essentially a LinkedIn member with elevated permissions and can perform Admin actions on a page. A non-null value would indicate CS activity on the website. This field is different from the impersonatorId. ImpersonatorId will be populated when a CS user is logged in as (or impersonating) another member. On the other hand, this field will be populated when a CS user logged in as himself has elevated permissions to perform Admin actions on the website.\",\"default\":null},{\"name\":\"time\",\"type\":\"long\",\"doc\":\"The time of the event\"},{\"name\":\"server\",\"type\":\"string\",\"doc\":\"The name of the server\",\"compliance\":\"NONE\"},{\"name\":\"service\",\"type\":\"string\",\"doc\":\"The name of the service. Synonymous to the com.linkedin.events.monitoring.EventHeader#container field.\",\"compliance\":\"NONE\"},{\"name\":\"environment\",\"type\":[\"string\",\"null\"],\"doc\":\"The environment the service is running in\",\"default\":\"\"},{\"name\":\"guid\",\"type\":{\"type\":\"fixed\",\"name\":\"Guid\",\"size\":16},\"doc\":\"A unique identifier for the message\",\"compliance\":\"NONE\"},{\"name\":\"treeId\",\"type\":[\"null\",{\"type\":\"fixed\",\"name\":\"fixed_16\",\"size\":16}],\"doc\":\"Service call tree uuid. If the traceData field is nonnull, the treeId in traceData should be identical to this.\",\"default\":null},{\"name\":\"requestId\",\"type\":[\"null\",\"int\"],\"doc\":\"Service call request id. If the traceData field is nonnull, the requestId in traceData should be identical to this.\",\"default\":null},{\"name\":\"impersonatorId\",\"type\":[\"null\",\"string\"],\"doc\":\"this is the ID of the CS Agent or Application acting on the users behalf\",\"default\":null},{\"name\":\"version\",\"type\":[\"null\",\"string\"],\"doc\":\"Synonymous to the com.linkedin.events.monitoring.EventHeader#version field. The version that the service which emitted this event was at. For services in multiproducts, this usually comes in the form of {major}.{minor}.{micro} (eg. 0.1.2), however for network services, the version follows a format like so: 0.0.2000-RC8.35047\",\"default\":null},{\"name\":\"instance\",\"type\":[\"null\",\"string\"],\"doc\":\"Synonymous to the com.linkedin.events.monitoring.EventHeader#instance field. The instance ID of the service (eg. i001)\",\"default\":null},{\"name\":\"appName\",\"type\":[\"null\",\"string\"],\"doc\":\"Synonymous to the com.linkedin.events.monitoring.EventHeader#service field. Named 'appName' here since this is what this field actually represents, and 'service' is already used. This is also synonymous to 'appName' in Play and network apps, where on a typical page there would be a <meta name=appName content=biz> tag. For network apps, this would be the container name without the '-tomcat' suffix. So for 'profile-tomcat', it would just be 'profile'. For Play! services, it would just be the container name, such as 'polls-frontend'. For additional information, please see the wiki at go/appname\",\"default\":null},{\"name\":\"testId\",\"type\":[\"null\",\"string\"],\"doc\":\"A client provided ID that uniquely identifies a particular execution of a test case.  This ID is provided by clients through an ENG_TEST_ID cookie.  The Selenium test framework automatically sets this cookie for each request.  This will be null when there is no ENG_TEST_ID provided.  See https://iwww.corp.linkedin.com/wiki/cf/display/ENGS/Selenium+Framework+Architecture+Documentation for more details on the test framework.  See https://iwww.corp.linkedin.com/wiki/cf/display/ENGS/Improving+Automated+Testability+of+Tracking+Events for details on the motiviation behind adding this test ID to the header and how it is used.\",\"default\":null},{\"name\":\"testSegmentId\",\"type\":[\"null\",\"string\"],\"doc\":\"A client provided ID that uniquely identifies a section of the testing code from a  particular execution of a test case.  This ID is provided by clients through an ENG_TEST_SEGMENT_ID cookie. \",\"default\":null},{\"name\":\"auditHeader\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"KafkaAuditHeader\",\"fields\":[{\"name\":\"time\",\"type\":\"long\",\"doc\":\"The time at which the event was emitted into kafka.\"},{\"name\":\"server\",\"type\":\"string\",\"doc\":\"The fully qualified name of the host from which the event is being emitted.\",\"compliance\":\"NONE\"},{\"name\":\"instance\",\"type\":[\"null\",\"string\"],\"doc\":\"The instance on the server from which the event is being emitted. e.g. i001\",\"default\":null},{\"name\":\"appName\",\"type\":\"string\",\"doc\":\"The name of the application from which the event is being emitted. see go/appname\",\"compliance\":\"NONE\"},{\"name\":\"messageId\",\"type\":{\"type\":\"fixed\",\"name\":\"UUID\",\"size\":16},\"doc\":\"A unique identifier for the message\",\"compliance\":\"NONE\"},{\"name\":\"auditVersion\",\"type\":[\"null\",\"int\"],\"doc\":\"The version that is being used for auditing. In version 0, the audit trail buckets events into 10 minute audit windows based on the EventHeader timestamp. In version 1, the audit trail buckets events as follows: if the schema has an outer KafkaAuditHeader, use the outer audit header timestamp for bucketing; else if the EventHeader has an inner KafkaAuditHeader use that inner audit header's timestamp for bucketing\",\"default\":null},{\"name\":\"fabricUrn\",\"type\":[\"null\",\"string\"],\"doc\":\"The fabricUrn of the host from which the event is being emitted. Fabric Urn in the format of urn:li:fabric:{fabric_name}. See go/fabric.\",\"default\":null},{\"name\":\"clusterConnectionString\",\"type\":[\"null\",\"string\"],\"doc\":\"This is a String that the client uses to establish some kind of connection with the Kafka cluster. The exact format of it depends on specific versions of clients and brokers. This information could potentially identify the fabric and cluster with which the client is producing to or consuming from.\",\"default\":null}]}],\"doc\":\"Header used by kafka for auditing the data in the kafka pipeline\",\"default\":null},{\"name\":\"pageInstance\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"PageInstance\",\"namespace\":\"com.linkedin.events.common\",\"fields\":[{\"name\":\"pageUrn\",\"type\":\"string\",\"doc\":\"The page entity. Example: urn:li:page:<pageKey>.\",\"compliance\":\"NONE\"},{\"name\":\"trackingId\",\"type\":{\"type\":\"fixed\",\"name\":\"TrackingId\",\"namespace\":\"com.linkedin.events.common\",\"size\":16},\"doc\":\"Uniquely identifies this rendering of the page.\",\"compliance\":\"NONE\"}]}],\"doc\":\"The instance of a page to which the request that triggered this event is responding.  For more information see go/pageinstance\",\"default\":null},{\"name\":\"clientApplicationInstance\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ApplicationInstance\",\"namespace\":\"com.linkedin.events.common\",\"fields\":[{\"name\":\"applicationUrn\",\"type\":\"string\",\"doc\":\"The application. Example: urn:li:application:<identifier>.\",\"compliance\":\"NONE\"},{\"name\":\"version\",\"type\":\"string\",\"doc\":\"The internal version number of the running application in standardized version format, see go/version.\",\"compliance\":\"NONE\"},{\"name\":\"trackingId\",\"type\":\"com.linkedin.events.common.TrackingId\",\"doc\":\"Uniquely identifies this instantiation of the application.  Created when an application is started from cold.  Preserved through application pause, suspend, loss of focus, background, etc.\",\"compliance\":\"NONE\"}]}],\"doc\":\"The particular instance of a client application which triggered this event.  For more information see go/clientApplicationInstance\",\"default\":null},{\"name\":\"originSource\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"OriginSource\",\"symbols\":[\"QPROD\"]}],\"doc\":\"If present, identifies this request as having an origin in a testing mechanism. If null, indicates a normal request from the external internet. For more information see go/originSource\",\"default\":null},{\"name\":\"sessionUrn\",\"type\":[\"null\",\"string\"],\"doc\":\"If memberId field is non-zero positive number, it indicates that request is member initiated. SessionUrn represents currently logged-in session information. There are two types of URN that represent session: MemberSessionUrn or LoginSessionUrn. MemberSessionUrn is used with MemberToken V3, whereas LoginSessionUrn is used for MemberToken V5 and up. In the long run, all clients will move to LoginSessionUrn. To read more: https://iwww.corp.linkedin.com/wiki/cf/display/ENGS/Session+Tracking\",\"default\":null},{\"name\":\"traceData\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"TraceData\",\"fields\":[{\"name\":\"treeId\",\"type\":\"fixed_16\",\"doc\":\"Service call tree uuid.\",\"compliance\":\"NONE\"},{\"name\":\"requestId\",\"type\":\"int\",\"doc\":\"Service call request id.\",\"compliance\":\"NONE\"},{\"name\":\"taskId\",\"type\":\"int\",\"doc\":\"An identifier for the task during which this trace data was saved.\",\"compliance\":\"NONE\"},{\"name\":\"rpcTrace\",\"type\":\"string\",\"doc\":\"The service call stack leading to this service.\",\"compliance\":\"NONE\"},{\"name\":\"forceTraceEnabled\",\"type\":\"boolean\",\"doc\":\"Flag indicating if the service call trace has been force enabled and ServiceCallEvents were emitted.\",\"default\":false,\"compliance\":\"NONE\"},{\"name\":\"context\",\"type\":{\"type\":\"map\",\"values\":\"string\"},\"doc\":\"A map containing any additional context or tags needed to support the tracing of the service call. For example, certain tags are used to indicate if the trace should be picked up by call-tree-app for visualization.\",\"compliance\":\"NONE\"},{\"name\":\"scaleFactor\",\"type\":[\"null\",\"double\"],\"doc\":\"A ratio that represents the fraction of service calls that should be traced. The value is only referenced when the service call is initiated to determine whether to enable tracing. Defaults to null for backwards compatibility, but this field should always be present.\",\"default\":null,\"compliance\":\"NONE\"}]}],\"doc\":\"Trace data containing information about the service call details of the service that produced this message. Nullable because this is an opt-in feature and is controlled via config. For more information see go/callTreeAndKafka\",\"default\":null}]}],\"doc\":\"Standard event header\"},{\"name\":\"request\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Request\",\"fields\":[{\"name\":\"method\",\"type\":{\"type\":\"enum\",\"name\":\"Method\",\"symbols\":[\"OPTIONS\",\"GET\",\"HEAD\",\"POST\",\"PUT\",\"DELETE\",\"TRACE\",\"CONNECT\",\"EXTENSION\"]},\"doc\":\"HTTP method of the request.\",\"compliance\":\"NONE\"},{\"name\":\"extensionMethod\",\"type\":[\"null\",\"string\"],\"doc\":\"The method string used if type is set to EXTENSION.\"},{\"name\":\"protocol\",\"type\":{\"type\":\"enum\",\"name\":\"Protocol\",\"symbols\":[\"HTTP\",\"HTTPS\"]},\"doc\":\"Protocol of the request.\",\"compliance\":\"NONE\"},{\"name\":\"ipAsBytes\",\"type\":[\"null\",{\"type\":\"fixed\",\"name\":\"IPAddress\",\"size\":16}],\"doc\":\"IPAddress of the request.\"},{\"name\":\"domain\",\"type\":[\"null\",\"string\"],\"doc\":\"The HTTP host+port of the request before traffic layer remap processing. For example, a remap might map http://www.linkedin.com/comm/school/ to http://traffic.fizzy.regular.fizzy-ats.prod-lor1.atd.prod.linkedin.com:12275/voyager/school/. In this case, 'domain' would be 'www.linkedin.com'.\"},{\"name\":\"path\",\"type\":\"string\",\"doc\":\"The HTTP path of the request before traffic layer remap processing. For example, a remap might map http://www.linkedin.com/comm/school/ to http://traffic.fizzy.regular.fizzy-ats.prod-lor1.atd.prod.linkedin.com:12275/voyager/school/. In this case, 'path' would be 'comm/school/'.\",\"compliance\":\"NONE\"},{\"name\":\"query\",\"type\":[\"null\",\"string\"],\"doc\":\"Whitelisted query parameters from the request.\"},{\"name\":\"referer\",\"type\":[\"null\",\"string\"],\"doc\":\"The referer URL in the request.\"},{\"name\":\"userAgent\",\"type\":[\"null\",\"string\"],\"doc\":\"The user agent of the request.\"},{\"name\":\"xForwardedFor\",\"type\":[\"null\",\"string\"],\"doc\":\"X-Forwarded-For header.\"},{\"name\":\"accept\",\"type\":[\"null\",\"string\"],\"doc\":\"User agent's accept content types.\"},{\"name\":\"acceptEncoding\",\"type\":[\"null\",\"string\"],\"doc\":\"User agent's accept encodings.\"},{\"name\":\"acceptLanguage\",\"type\":[\"null\",\"string\"],\"doc\":\"User agent's accept languages.\"},{\"name\":\"contentLength\",\"type\":[\"null\",\"int\"],\"doc\":\"Content length in the request (present in POSTs).\"},{\"name\":\"bcookie\",\"type\":[\"null\",\"string\"],\"doc\":\"Raw bcookie in the request.\"},{\"name\":\"bsCookieInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"BsCookieInfo\",\"fields\":[{\"name\":\"issueTime\",\"type\":\"long\",\"doc\":\"Issue timestamp in the cookie, in seconds\"},{\"name\":\"browserId\",\"type\":\"string\",\"doc\":\"The browser id field of the cookie\"}]}],\"doc\":\"BsCookie in the request.\"},{\"name\":\"xLiTrack\",\"type\":[\"null\",\"string\"],\"doc\":\"Tracking header sent by mobile clients.\"},{\"name\":\"contentType\",\"type\":[\"null\",\"string\"],\"doc\":\"Applicable in case of POST requests.\"},{\"name\":\"cookies\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Names of cookies submitted.\"},{\"name\":\"encryptedFullUrl\",\"type\":[\"null\",\"string\"],\"doc\":\"Encrypted full URL of request.\",\"default\":null},{\"name\":\"encryptedBody\",\"type\":[\"null\",\"string\"],\"doc\":\"Encrypted body of request.\",\"default\":null},{\"name\":\"isXSS\",\"type\":\"boolean\",\"doc\":\"Flag set if request contains potential xss.\",\"default\":false,\"compliance\":\"NONE\"},{\"name\":\"sessionId\",\"type\":[\"null\",\"int\"],\"doc\":\"The session ID of the client request.\",\"default\":null},{\"name\":\"loginSessionUrn\",\"type\":[\"null\",\"string\"],\"doc\":\"The login session urn of enterprise account.\",\"default\":null},{\"name\":\"headers\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"A list of http headers and their values of a request.\",\"default\":null},{\"name\":\"headerNames\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"A list of header names of sensitive or unknown headers.\",\"default\":null},{\"name\":\"mobileHeader\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"MobileHeader\",\"fields\":[{\"name\":\"osName\",\"type\":[\"null\",\"string\"],\"doc\":\"The name of the operating system.\",\"default\":null},{\"name\":\"osVersion\",\"type\":[\"null\",\"string\"],\"doc\":\"The version of the operating system.\",\"default\":null},{\"name\":\"deviceModel\",\"type\":[\"null\",\"string\"],\"doc\":\"The model of the device.\",\"default\":null},{\"name\":\"appVersion\",\"type\":[\"null\",\"string\"],\"doc\":\"Generated as per guidance from Google/Apple and depends on device like its architecture/screen density. Eg: 82301 for Google and 9.5.100 for Apple\",\"default\":null},{\"name\":\"advertiserId\",\"type\":[\"null\",\"string\"],\"doc\":\"This is the unique identifier per device for advertising purposes. More details at: go/mobiletracking.\",\"default\":null},{\"name\":\"vendorId\",\"type\":[\"null\",\"string\"],\"doc\":\"This is the unique identifier per vendor for apps on a device. More details at: go/mobiletracking.\",\"default\":null},{\"name\":\"isAdTrackingLimited\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Tells whether limited ad tracking is enabled by user or not. More details at: go/mobiletracking.\",\"default\":null},{\"name\":\"appMarketingVersion\",\"type\":[\"null\",\"string\"],\"doc\":\"Marketing string which is used to indicate the version of the app we upload to app store. Eg: 4.0.23 for Google and 9.1.2 for Apple\",\"default\":null},{\"name\":\"appVendorVersion\",\"type\":[\"null\",\"string\"],\"doc\":\"For Android, its generated as per guidance from Google and depends on device like its architecture/screen density. Eg: 82301. For Apple, it co-relates to our multi-product version but for apple. Eg: 9.5.100\",\"default\":null},{\"name\":\"appVendorVersionShort\",\"type\":[\"null\",\"string\"],\"doc\":\"For Android, its a subset of appVendorVersion Eg: 823. For Apple, it is a number generated to do patch fixes on appVendorVersion\",\"default\":null},{\"name\":\"appState\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"NativeApplicationState\",\"symbols\":[\"APPLICATION_FOREGROUND_ACTIVE\",\"APPLICATION_FOREGROUND_INACTIVE\",\"APPLICATION_BACKGROUND\"]}],\"doc\":\"State of the app when this event was queued. This should be set by native client. The events containing this header is sent by native clients. More information on states can be found at go/nativeapplicationstate.\",\"default\":null},{\"name\":\"connectionType\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"MobileConnectionType\",\"symbols\":[\"NO_DATA\",\"WIFI\",\"FOUR_G\",\"THREE_G\",\"GPRS\",\"TWO_G\"]}],\"doc\":\"The connection type of the mobile device when event is fired. Null represents that the value is not written by the producer, makes this field backwards compatible. Use UNKNOWN when connection is available but its type is not known. e.g. when iOS client is connected to network but can't determine exact type of network.\",\"default\":null}]}],\"doc\":\"Optional mobile header to track mobile usage.\",\"default\":null},{\"name\":\"remappedDomain\",\"type\":[\"null\",\"string\"],\"doc\":\"The HTTP host+port of the request after traffic layer remap processing. For example, a remap might map http://www.linkedin.com/comm/school/ to http://traffic.fizzy.regular.fizzy-ats.prod-lor1.atd.prod.linkedin.com:12275/voyager/school/. In this case, 'remappedDomain' would be 'traffic.fizzy.regular.fizzy-ats.prod-lor1.atd.prod.linkedin.com:12275'. Null is added for backward compatibility.\",\"default\":null,\"compliance\":\"NONE\"},{\"name\":\"remappedPath\",\"type\":[\"null\",\"string\"],\"doc\":\"The HTTP path of the request after traffic layer remap processing. For example, a remap might map http://www.linkedin.com/comm/school/ to http://traffic.fizzy.regular.fizzy-ats.prod-lor1.atd.prod.linkedin.com:12275/voyager/school/. In this case, 'remappedPath' would be 'voyager/school/'. Null is added for backward compatibility.\",\"default\":null,\"compliance\":\"NONE\"}]}],\"doc\":\"Header and cookie information of the request.\"},{\"name\":\"response\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Response\",\"fields\":[{\"name\":\"statusCode\",\"type\":\"int\",\"doc\":\"Status code.\",\"compliance\":\"NONE\"},{\"name\":\"serverDuration\",\"type\":\"long\",\"doc\":\"Time taken in milliseconds by server to generate the response.\",\"compliance\":\"NONE\"},{\"name\":\"bcookie\",\"type\":[\"null\",\"string\"],\"doc\":\"Bcookie being set.\"},{\"name\":\"bsCookieInfo\",\"type\":[\"null\",\"BsCookieInfo\"],\"doc\":\"Bscookie being set.\"},{\"name\":\"xLiUuid\",\"type\":[\"null\",\"string\"],\"doc\":\"Unique identifier of the request.\"},{\"name\":\"contentType\",\"type\":[\"null\",\"string\"],\"doc\":\"Type of content returned.\"},{\"name\":\"contentLength\",\"type\":[\"null\",\"int\"],\"doc\":\"Size of response body; absent if returning chunked.\"},{\"name\":\"transferEncoding\",\"type\":[\"null\",\"string\"],\"doc\":\"Encoding of the body, if set.\"},{\"name\":\"cookiesSet\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ResponseCookie\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of cookie\"},{\"name\":\"domain\",\"type\":[\"null\",\"string\"],\"doc\":\"Domain on which cookie is set\"},{\"name\":\"maxAge\",\"type\":[\"null\",\"int\"],\"doc\":\"TTL in seconds of cookie\"},{\"name\":\"expires\",\"type\":[\"null\",\"int\"],\"doc\":\"Absolute timestamp in seconds of expiry of cookie\"},{\"name\":\"path\",\"type\":[\"null\",\"string\"],\"doc\":\"Path on which cookie is set\"},{\"name\":\"version\",\"type\":[\"null\",\"string\"],\"doc\":\"Version of cookie\"},{\"name\":\"isSecure\",\"type\":\"boolean\",\"doc\":\"True if secure attribute set\",\"compliance\":\"NONE\"},{\"name\":\"isHttpOnly\",\"type\":\"boolean\",\"doc\":\"True if HTTP only attribute set\",\"compliance\":\"NONE\"},{\"name\":\"sameSite\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"SameSite\",\"symbols\":[\"STRICT\",\"LAX\",\"NONE\"]}],\"doc\":\"SameSite attribute of a cookie determines the context in which cookies will be sent in the request to the server. Default is null, as this field is optional. Browsers such as Chrome 80+ will interpret missing SameSite attribute as LAX. More in RFC: https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#page-27 and https://web.dev/samesite-cookies-explained/\",\"default\":null,\"compliance\":\"NONE\"}]}}],\"doc\":\"Cookies being set.\"},{\"name\":\"cookiesDeleted\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"ResponseCookie\"}],\"doc\":\"Cookies being deleted.\"}]}],\"doc\":\"Response Information.\"}]}").toString());

      cache.getFastGenericDeserializer(testUserRequestSchema, testUserRequestSchema);
      //if(i % 1000 == 0) cache.changeRuntimeClassLoader();
    }
  }

  @Test(groups = {"serialization"})
  public void testCodeCache() throws Exception {
    Random random = new Random();
    int LOAD_NUM = 30000;
    int iterTime = 1000;
    Map<Object, Object> properties = new HashMap<>();
    GenericData.Record[] generatedRecord = new GenericData.Record[LOAD_NUM];
    AvroGenericSerializer[] fastSerializerList = new AvroGenericSerializer[LOAD_NUM];

    // load configuration parameters to avro data generator
    properties.put( AvroRandomDataGenerator.ARRAY_LENGTH_PROP, BenchmarkConstants.ARRAY_SIZE);
    properties.put(AvroRandomDataGenerator.STRING_LENGTH_PROP, BenchmarkConstants.STRING_SIZE);
    properties.put(AvroRandomDataGenerator.BYTES_LENGTH_PROP, BenchmarkConstants.BYTES_SIZE);
    properties.put(AvroRandomDataGenerator.MAP_LENGTH_PROP, BenchmarkConstants.MAP_SIZE);


    for(int i=0; i<LOAD_NUM; i++)
    {
      Schema testUserRequestSchema = Schema.parse(new StringBuilder().append("{\"type\":\"record\",\"name\":\"UserRequestEvent").append(i).append("\",\"namespace\":\"com.linkedin.events\",\"fields\":[{\"name\":\"header\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"EventHeader\",\"fields\":[{\"name\":\"memberId\",\"type\":\"int\",\"doc\":\"The LinkedIn member ID of the user initiating the action.  LinkedIn member IDs are integers greater than zero.  Guests are represented either as zero or a negative number.\"},{\"name\":\"viewerUrn\",\"type\":[\"null\",\"string\"],\"doc\":\"The LinkedIn URN of the user initiating the action.  For other applications like Slideshare, this should be filled in when the LinkedIn member URN is actually known.  The LinkedIn member URN would be known, for example, when the user has linked their Slideshare account with their LinkedIn account.\",\"default\":null},{\"name\":\"applicationViewerUrn\",\"type\":[\"null\",\"string\"],\"doc\":\"The Application URN of the user initiating the action.  This URN identifies the member within the particular application that the member is using, which may or may not be LinkedIn.  If the user is interacting with LinkedIn then this should be the LinkedIn URN, the same as viewerUrn.  If the member is interacting with a different site, such as Slideshare, then this should be the URN identifying the member in that site.\",\"default\":null},{\"name\":\"csUserUrn\",\"type\":[\"null\",\"string\"],\"doc\":\"The URN of the CS user initiating the action. A CS user is essentially a LinkedIn member with elevated permissions and can perform Admin actions on a page. A non-null value would indicate CS activity on the website. This field is different from the impersonatorId. ImpersonatorId will be populated when a CS user is logged in as (or impersonating) another member. On the other hand, this field will be populated when a CS user logged in as himself has elevated permissions to perform Admin actions on the website.\",\"default\":null},{\"name\":\"time\",\"type\":\"long\",\"doc\":\"The time of the event\"},{\"name\":\"server\",\"type\":\"string\",\"doc\":\"The name of the server\",\"compliance\":\"NONE\"},{\"name\":\"service\",\"type\":\"string\",\"doc\":\"The name of the service. Synonymous to the com.linkedin.events.monitoring.EventHeader#container field.\",\"compliance\":\"NONE\"},{\"name\":\"environment\",\"type\":[\"string\",\"null\"],\"doc\":\"The environment the service is running in\",\"default\":\"\"},{\"name\":\"guid\",\"type\":{\"type\":\"fixed\",\"name\":\"Guid\",\"size\":16},\"doc\":\"A unique identifier for the message\",\"compliance\":\"NONE\"},{\"name\":\"treeId\",\"type\":[\"null\",{\"type\":\"fixed\",\"name\":\"fixed_16\",\"size\":16}],\"doc\":\"Service call tree uuid. If the traceData field is nonnull, the treeId in traceData should be identical to this.\",\"default\":null},{\"name\":\"requestId\",\"type\":[\"null\",\"int\"],\"doc\":\"Service call request id. If the traceData field is nonnull, the requestId in traceData should be identical to this.\",\"default\":null},{\"name\":\"impersonatorId\",\"type\":[\"null\",\"string\"],\"doc\":\"this is the ID of the CS Agent or Application acting on the users behalf\",\"default\":null},{\"name\":\"version\",\"type\":[\"null\",\"string\"],\"doc\":\"Synonymous to the com.linkedin.events.monitoring.EventHeader#version field. The version that the service which emitted this event was at. For services in multiproducts, this usually comes in the form of {major}.{minor}.{micro} (eg. 0.1.2), however for network services, the version follows a format like so: 0.0.2000-RC8.35047\",\"default\":null},{\"name\":\"instance\",\"type\":[\"null\",\"string\"],\"doc\":\"Synonymous to the com.linkedin.events.monitoring.EventHeader#instance field. The instance ID of the service (eg. i001)\",\"default\":null},{\"name\":\"appName\",\"type\":[\"null\",\"string\"],\"doc\":\"Synonymous to the com.linkedin.events.monitoring.EventHeader#service field. Named 'appName' here since this is what this field actually represents, and 'service' is already used. This is also synonymous to 'appName' in Play and network apps, where on a typical page there would be a <meta name=appName content=biz> tag. For network apps, this would be the container name without the '-tomcat' suffix. So for 'profile-tomcat', it would just be 'profile'. For Play! services, it would just be the container name, such as 'polls-frontend'. For additional information, please see the wiki at go/appname\",\"default\":null},{\"name\":\"testId\",\"type\":[\"null\",\"string\"],\"doc\":\"A client provided ID that uniquely identifies a particular execution of a test case.  This ID is provided by clients through an ENG_TEST_ID cookie.  The Selenium test framework automatically sets this cookie for each request.  This will be null when there is no ENG_TEST_ID provided.  See https://iwww.corp.linkedin.com/wiki/cf/display/ENGS/Selenium+Framework+Architecture+Documentation for more details on the test framework.  See https://iwww.corp.linkedin.com/wiki/cf/display/ENGS/Improving+Automated+Testability+of+Tracking+Events for details on the motiviation behind adding this test ID to the header and how it is used.\",\"default\":null},{\"name\":\"testSegmentId\",\"type\":[\"null\",\"string\"],\"doc\":\"A client provided ID that uniquely identifies a section of the testing code from a  particular execution of a test case.  This ID is provided by clients through an ENG_TEST_SEGMENT_ID cookie. \",\"default\":null},{\"name\":\"auditHeader\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"KafkaAuditHeader\",\"fields\":[{\"name\":\"time\",\"type\":\"long\",\"doc\":\"The time at which the event was emitted into kafka.\"},{\"name\":\"server\",\"type\":\"string\",\"doc\":\"The fully qualified name of the host from which the event is being emitted.\",\"compliance\":\"NONE\"},{\"name\":\"instance\",\"type\":[\"null\",\"string\"],\"doc\":\"The instance on the server from which the event is being emitted. e.g. i001\",\"default\":null},{\"name\":\"appName\",\"type\":\"string\",\"doc\":\"The name of the application from which the event is being emitted. see go/appname\",\"compliance\":\"NONE\"},{\"name\":\"messageId\",\"type\":{\"type\":\"fixed\",\"name\":\"UUID\",\"size\":16},\"doc\":\"A unique identifier for the message\",\"compliance\":\"NONE\"},{\"name\":\"auditVersion\",\"type\":[\"null\",\"int\"],\"doc\":\"The version that is being used for auditing. In version 0, the audit trail buckets events into 10 minute audit windows based on the EventHeader timestamp. In version 1, the audit trail buckets events as follows: if the schema has an outer KafkaAuditHeader, use the outer audit header timestamp for bucketing; else if the EventHeader has an inner KafkaAuditHeader use that inner audit header's timestamp for bucketing\",\"default\":null},{\"name\":\"fabricUrn\",\"type\":[\"null\",\"string\"],\"doc\":\"The fabricUrn of the host from which the event is being emitted. Fabric Urn in the format of urn:li:fabric:{fabric_name}. See go/fabric.\",\"default\":null},{\"name\":\"clusterConnectionString\",\"type\":[\"null\",\"string\"],\"doc\":\"This is a String that the client uses to establish some kind of connection with the Kafka cluster. The exact format of it depends on specific versions of clients and brokers. This information could potentially identify the fabric and cluster with which the client is producing to or consuming from.\",\"default\":null}]}],\"doc\":\"Header used by kafka for auditing the data in the kafka pipeline\",\"default\":null},{\"name\":\"pageInstance\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"PageInstance\",\"namespace\":\"com.linkedin.events.common\",\"fields\":[{\"name\":\"pageUrn\",\"type\":\"string\",\"doc\":\"The page entity. Example: urn:li:page:<pageKey>.\",\"compliance\":\"NONE\"},{\"name\":\"trackingId\",\"type\":{\"type\":\"fixed\",\"name\":\"TrackingId\",\"namespace\":\"com.linkedin.events.common\",\"size\":16},\"doc\":\"Uniquely identifies this rendering of the page.\",\"compliance\":\"NONE\"}]}],\"doc\":\"The instance of a page to which the request that triggered this event is responding.  For more information see go/pageinstance\",\"default\":null},{\"name\":\"clientApplicationInstance\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ApplicationInstance\",\"namespace\":\"com.linkedin.events.common\",\"fields\":[{\"name\":\"applicationUrn\",\"type\":\"string\",\"doc\":\"The application. Example: urn:li:application:<identifier>.\",\"compliance\":\"NONE\"},{\"name\":\"version\",\"type\":\"string\",\"doc\":\"The internal version number of the running application in standardized version format, see go/version.\",\"compliance\":\"NONE\"},{\"name\":\"trackingId\",\"type\":\"com.linkedin.events.common.TrackingId\",\"doc\":\"Uniquely identifies this instantiation of the application.  Created when an application is started from cold.  Preserved through application pause, suspend, loss of focus, background, etc.\",\"compliance\":\"NONE\"}]}],\"doc\":\"The particular instance of a client application which triggered this event.  For more information see go/clientApplicationInstance\",\"default\":null},{\"name\":\"originSource\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"OriginSource\",\"symbols\":[\"QPROD\"]}],\"doc\":\"If present, identifies this request as having an origin in a testing mechanism. If null, indicates a normal request from the external internet. For more information see go/originSource\",\"default\":null},{\"name\":\"sessionUrn\",\"type\":[\"null\",\"string\"],\"doc\":\"If memberId field is non-zero positive number, it indicates that request is member initiated. SessionUrn represents currently logged-in session information. There are two types of URN that represent session: MemberSessionUrn or LoginSessionUrn. MemberSessionUrn is used with MemberToken V3, whereas LoginSessionUrn is used for MemberToken V5 and up. In the long run, all clients will move to LoginSessionUrn. To read more: https://iwww.corp.linkedin.com/wiki/cf/display/ENGS/Session+Tracking\",\"default\":null},{\"name\":\"traceData\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"TraceData\",\"fields\":[{\"name\":\"treeId\",\"type\":\"fixed_16\",\"doc\":\"Service call tree uuid.\",\"compliance\":\"NONE\"},{\"name\":\"requestId\",\"type\":\"int\",\"doc\":\"Service call request id.\",\"compliance\":\"NONE\"},{\"name\":\"taskId\",\"type\":\"int\",\"doc\":\"An identifier for the task during which this trace data was saved.\",\"compliance\":\"NONE\"},{\"name\":\"rpcTrace\",\"type\":\"string\",\"doc\":\"The service call stack leading to this service.\",\"compliance\":\"NONE\"},{\"name\":\"forceTraceEnabled\",\"type\":\"boolean\",\"doc\":\"Flag indicating if the service call trace has been force enabled and ServiceCallEvents were emitted.\",\"default\":false,\"compliance\":\"NONE\"},{\"name\":\"context\",\"type\":{\"type\":\"map\",\"values\":\"string\"},\"doc\":\"A map containing any additional context or tags needed to support the tracing of the service call. For example, certain tags are used to indicate if the trace should be picked up by call-tree-app for visualization.\",\"compliance\":\"NONE\"},{\"name\":\"scaleFactor\",\"type\":[\"null\",\"double\"],\"doc\":\"A ratio that represents the fraction of service calls that should be traced. The value is only referenced when the service call is initiated to determine whether to enable tracing. Defaults to null for backwards compatibility, but this field should always be present.\",\"default\":null,\"compliance\":\"NONE\"}]}],\"doc\":\"Trace data containing information about the service call details of the service that produced this message. Nullable because this is an opt-in feature and is controlled via config. For more information see go/callTreeAndKafka\",\"default\":null}]}],\"doc\":\"Standard event header\"},{\"name\":\"request\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Request\",\"fields\":[{\"name\":\"method\",\"type\":{\"type\":\"enum\",\"name\":\"Method\",\"symbols\":[\"OPTIONS\",\"GET\",\"HEAD\",\"POST\",\"PUT\",\"DELETE\",\"TRACE\",\"CONNECT\",\"EXTENSION\"]},\"doc\":\"HTTP method of the request.\",\"compliance\":\"NONE\"},{\"name\":\"extensionMethod\",\"type\":[\"null\",\"string\"],\"doc\":\"The method string used if type is set to EXTENSION.\"},{\"name\":\"protocol\",\"type\":{\"type\":\"enum\",\"name\":\"Protocol\",\"symbols\":[\"HTTP\",\"HTTPS\"]},\"doc\":\"Protocol of the request.\",\"compliance\":\"NONE\"},{\"name\":\"ipAsBytes\",\"type\":[\"null\",{\"type\":\"fixed\",\"name\":\"IPAddress\",\"size\":16}],\"doc\":\"IPAddress of the request.\"},{\"name\":\"domain\",\"type\":[\"null\",\"string\"],\"doc\":\"The HTTP host+port of the request before traffic layer remap processing. For example, a remap might map http://www.linkedin.com/comm/school/ to http://traffic.fizzy.regular.fizzy-ats.prod-lor1.atd.prod.linkedin.com:12275/voyager/school/. In this case, 'domain' would be 'www.linkedin.com'.\"},{\"name\":\"path\",\"type\":\"string\",\"doc\":\"The HTTP path of the request before traffic layer remap processing. For example, a remap might map http://www.linkedin.com/comm/school/ to http://traffic.fizzy.regular.fizzy-ats.prod-lor1.atd.prod.linkedin.com:12275/voyager/school/. In this case, 'path' would be 'comm/school/'.\",\"compliance\":\"NONE\"},{\"name\":\"query\",\"type\":[\"null\",\"string\"],\"doc\":\"Whitelisted query parameters from the request.\"},{\"name\":\"referer\",\"type\":[\"null\",\"string\"],\"doc\":\"The referer URL in the request.\"},{\"name\":\"userAgent\",\"type\":[\"null\",\"string\"],\"doc\":\"The user agent of the request.\"},{\"name\":\"xForwardedFor\",\"type\":[\"null\",\"string\"],\"doc\":\"X-Forwarded-For header.\"},{\"name\":\"accept\",\"type\":[\"null\",\"string\"],\"doc\":\"User agent's accept content types.\"},{\"name\":\"acceptEncoding\",\"type\":[\"null\",\"string\"],\"doc\":\"User agent's accept encodings.\"},{\"name\":\"acceptLanguage\",\"type\":[\"null\",\"string\"],\"doc\":\"User agent's accept languages.\"},{\"name\":\"contentLength\",\"type\":[\"null\",\"int\"],\"doc\":\"Content length in the request (present in POSTs).\"},{\"name\":\"bcookie\",\"type\":[\"null\",\"string\"],\"doc\":\"Raw bcookie in the request.\"},{\"name\":\"bsCookieInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"BsCookieInfo\",\"fields\":[{\"name\":\"issueTime\",\"type\":\"long\",\"doc\":\"Issue timestamp in the cookie, in seconds\"},{\"name\":\"browserId\",\"type\":\"string\",\"doc\":\"The browser id field of the cookie\"}]}],\"doc\":\"BsCookie in the request.\"},{\"name\":\"xLiTrack\",\"type\":[\"null\",\"string\"],\"doc\":\"Tracking header sent by mobile clients.\"},{\"name\":\"contentType\",\"type\":[\"null\",\"string\"],\"doc\":\"Applicable in case of POST requests.\"},{\"name\":\"cookies\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Names of cookies submitted.\"},{\"name\":\"encryptedFullUrl\",\"type\":[\"null\",\"string\"],\"doc\":\"Encrypted full URL of request.\",\"default\":null},{\"name\":\"encryptedBody\",\"type\":[\"null\",\"string\"],\"doc\":\"Encrypted body of request.\",\"default\":null},{\"name\":\"isXSS\",\"type\":\"boolean\",\"doc\":\"Flag set if request contains potential xss.\",\"default\":false,\"compliance\":\"NONE\"},{\"name\":\"sessionId\",\"type\":[\"null\",\"int\"],\"doc\":\"The session ID of the client request.\",\"default\":null},{\"name\":\"loginSessionUrn\",\"type\":[\"null\",\"string\"],\"doc\":\"The login session urn of enterprise account.\",\"default\":null},{\"name\":\"headers\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"A list of http headers and their values of a request.\",\"default\":null},{\"name\":\"headerNames\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"A list of header names of sensitive or unknown headers.\",\"default\":null},{\"name\":\"mobileHeader\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"MobileHeader\",\"fields\":[{\"name\":\"osName\",\"type\":[\"null\",\"string\"],\"doc\":\"The name of the operating system.\",\"default\":null},{\"name\":\"osVersion\",\"type\":[\"null\",\"string\"],\"doc\":\"The version of the operating system.\",\"default\":null},{\"name\":\"deviceModel\",\"type\":[\"null\",\"string\"],\"doc\":\"The model of the device.\",\"default\":null},{\"name\":\"appVersion\",\"type\":[\"null\",\"string\"],\"doc\":\"Generated as per guidance from Google/Apple and depends on device like its architecture/screen density. Eg: 82301 for Google and 9.5.100 for Apple\",\"default\":null},{\"name\":\"advertiserId\",\"type\":[\"null\",\"string\"],\"doc\":\"This is the unique identifier per device for advertising purposes. More details at: go/mobiletracking.\",\"default\":null},{\"name\":\"vendorId\",\"type\":[\"null\",\"string\"],\"doc\":\"This is the unique identifier per vendor for apps on a device. More details at: go/mobiletracking.\",\"default\":null},{\"name\":\"isAdTrackingLimited\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Tells whether limited ad tracking is enabled by user or not. More details at: go/mobiletracking.\",\"default\":null},{\"name\":\"appMarketingVersion\",\"type\":[\"null\",\"string\"],\"doc\":\"Marketing string which is used to indicate the version of the app we upload to app store. Eg: 4.0.23 for Google and 9.1.2 for Apple\",\"default\":null},{\"name\":\"appVendorVersion\",\"type\":[\"null\",\"string\"],\"doc\":\"For Android, its generated as per guidance from Google and depends on device like its architecture/screen density. Eg: 82301. For Apple, it co-relates to our multi-product version but for apple. Eg: 9.5.100\",\"default\":null},{\"name\":\"appVendorVersionShort\",\"type\":[\"null\",\"string\"],\"doc\":\"For Android, its a subset of appVendorVersion Eg: 823. For Apple, it is a number generated to do patch fixes on appVendorVersion\",\"default\":null},{\"name\":\"appState\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"NativeApplicationState\",\"symbols\":[\"APPLICATION_FOREGROUND_ACTIVE\",\"APPLICATION_FOREGROUND_INACTIVE\",\"APPLICATION_BACKGROUND\"]}],\"doc\":\"State of the app when this event was queued. This should be set by native client. The events containing this header is sent by native clients. More information on states can be found at go/nativeapplicationstate.\",\"default\":null},{\"name\":\"connectionType\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"MobileConnectionType\",\"symbols\":[\"NO_DATA\",\"WIFI\",\"FOUR_G\",\"THREE_G\",\"GPRS\",\"TWO_G\"]}],\"doc\":\"The connection type of the mobile device when event is fired. Null represents that the value is not written by the producer, makes this field backwards compatible. Use UNKNOWN when connection is available but its type is not known. e.g. when iOS client is connected to network but can't determine exact type of network.\",\"default\":null}]}],\"doc\":\"Optional mobile header to track mobile usage.\",\"default\":null},{\"name\":\"remappedDomain\",\"type\":[\"null\",\"string\"],\"doc\":\"The HTTP host+port of the request after traffic layer remap processing. For example, a remap might map http://www.linkedin.com/comm/school/ to http://traffic.fizzy.regular.fizzy-ats.prod-lor1.atd.prod.linkedin.com:12275/voyager/school/. In this case, 'remappedDomain' would be 'traffic.fizzy.regular.fizzy-ats.prod-lor1.atd.prod.linkedin.com:12275'. Null is added for backward compatibility.\",\"default\":null,\"compliance\":\"NONE\"},{\"name\":\"remappedPath\",\"type\":[\"null\",\"string\"],\"doc\":\"The HTTP path of the request after traffic layer remap processing. For example, a remap might map http://www.linkedin.com/comm/school/ to http://traffic.fizzy.regular.fizzy-ats.prod-lor1.atd.prod.linkedin.com:12275/voyager/school/. In this case, 'remappedPath' would be 'voyager/school/'. Null is added for backward compatibility.\",\"default\":null,\"compliance\":\"NONE\"}]}],\"doc\":\"Header and cookie information of the request.\"},{\"name\":\"response\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Response\",\"fields\":[{\"name\":\"statusCode\",\"type\":\"int\",\"doc\":\"Status code.\",\"compliance\":\"NONE\"},{\"name\":\"serverDuration\",\"type\":\"long\",\"doc\":\"Time taken in milliseconds by server to generate the response.\",\"compliance\":\"NONE\"},{\"name\":\"bcookie\",\"type\":[\"null\",\"string\"],\"doc\":\"Bcookie being set.\"},{\"name\":\"bsCookieInfo\",\"type\":[\"null\",\"BsCookieInfo\"],\"doc\":\"Bscookie being set.\"},{\"name\":\"xLiUuid\",\"type\":[\"null\",\"string\"],\"doc\":\"Unique identifier of the request.\"},{\"name\":\"contentType\",\"type\":[\"null\",\"string\"],\"doc\":\"Type of content returned.\"},{\"name\":\"contentLength\",\"type\":[\"null\",\"int\"],\"doc\":\"Size of response body; absent if returning chunked.\"},{\"name\":\"transferEncoding\",\"type\":[\"null\",\"string\"],\"doc\":\"Encoding of the body, if set.\"},{\"name\":\"cookiesSet\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ResponseCookie\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of cookie\"},{\"name\":\"domain\",\"type\":[\"null\",\"string\"],\"doc\":\"Domain on which cookie is set\"},{\"name\":\"maxAge\",\"type\":[\"null\",\"int\"],\"doc\":\"TTL in seconds of cookie\"},{\"name\":\"expires\",\"type\":[\"null\",\"int\"],\"doc\":\"Absolute timestamp in seconds of expiry of cookie\"},{\"name\":\"path\",\"type\":[\"null\",\"string\"],\"doc\":\"Path on which cookie is set\"},{\"name\":\"version\",\"type\":[\"null\",\"string\"],\"doc\":\"Version of cookie\"},{\"name\":\"isSecure\",\"type\":\"boolean\",\"doc\":\"True if secure attribute set\",\"compliance\":\"NONE\"},{\"name\":\"isHttpOnly\",\"type\":\"boolean\",\"doc\":\"True if HTTP only attribute set\",\"compliance\":\"NONE\"},{\"name\":\"sameSite\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"SameSite\",\"symbols\":[\"STRICT\",\"LAX\",\"NONE\"]}],\"doc\":\"SameSite attribute of a cookie determines the context in which cookies will be sent in the request to the server. Default is null, as this field is optional. Browsers such as Chrome 80+ will interpret missing SameSite attribute as LAX. More in RFC: https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#page-27 and https://web.dev/samesite-cookies-explained/\",\"default\":null,\"compliance\":\"NONE\"}]}}],\"doc\":\"Cookies being set.\"},{\"name\":\"cookiesDeleted\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"ResponseCookie\"}],\"doc\":\"Cookies being deleted.\"}]}],\"doc\":\"Response Information.\"}]}").toString());

      cache.getFastGenericSerializer(testUserRequestSchema);

      AvroRandomDataGenerator generator = new AvroRandomDataGenerator(testUserRequestSchema, random);

      generatedRecord[i] = (GenericData.Record) generator.generate(properties);
      fastSerializerList[i] = new AvroGenericSerializer(new FastGenericDatumWriter<>(testUserRequestSchema, cache));
      //fastSerializerList[i] = new AvroGenericSerializer(testUserRequestSchema);
    }


    for(int i=0; i<5*iterTime; i++)
    {
      for(int j=0; j<LOAD_NUM; j++)
      {
        fastSerializerList[j].serialize(generatedRecord[j]);
      }
    }

    long totalTime = 0;
    for(int i=0; i<iterTime; i++)
    {
      long startTime = System.currentTimeMillis();
      for(int j=0; j<LOAD_NUM; j++)
      {
        fastSerializerList[j].serialize(generatedRecord[j]);
      }
      long endTime = System.currentTimeMillis();
      totalTime += (endTime - startTime);
    }
    System.out.println(totalTime/(float)iterTime);
  }
}
